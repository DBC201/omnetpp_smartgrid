<#-- template include for network.ned.ftl -->

<#if !nodeTypeExists>
module ${nodeType} {
    parameters:
        @display("i=misc/node_vs");
    gates:
<#if gateVectorWithIndices || gateVectorWithPlusPlus>
        inout ${vectorGate}[];
<#elseif bintree>
        inout ${treeParentGate};
        inout ${treeLeftChild};
        inout ${treeRightChild};
<#else>
        inout ${treeParentGate};
        inout ${treeChildGate}[];
</#if>
    connections allowunconnected:
}
</#if>

<#if channelTypeSupplied && !channelTypeExists>
channel ${channelType} extends ned.DatarateChannel {
    parameters:
        int cost = default(0);
}
</#if>

<#-- abbreviations used for the connections: -->
<#if gateVectorWithIndices>
  <#assign parent = vectorGate + "[0]">
  <#function child i> <#return vectorGate + "[" + iif(i?is_number, i+1, "1+" + i) + "]"> </#function>
<#elseif gateVectorWithPlusPlus>
  <#assign parent = vectorGate + "++">
  <#function child i> <#return vectorGate + "++"> </#function>
<#else>
  <#assign parent = treeParentGate>
  <#if bintree>
    <#function child i> <#return iif(i==0, treeLeftChild, treeRightChild)> </#function> <#-- i must be numeric! -->
  <#else>
    <#function child i> <#return treeChildGate + "[" + i + "]"> </#function>
  </#if>
</#if>

<#-- TODO: generateCoordinates -->
//
// A generated ${networkKeyword} with ${iif(bintree, "binary tree", "k-ary tree")} topology.
//
<#if parametricNED>
${networkKeyword} ${targetTypeName}
{
    parameters:
        int levels = default(${treeLevels});  // 1 = root only
  <#if ktree>
        int k = default(${treeK}); // tree branching factor
  </#if>
    submodules:
  <#if bintree>
    <#if gateVectorWithIndices>
        node[2^levels-1]: ${nodeType} { gates: ${vectorGate}[3]; }
    <#else>
        node[2^levels-1]: ${nodeType};
    </#if>
  <#else>
    <#if gateVectorWithIndices>
        node[(k^levels-1) / (k-1)]: ${nodeType} { gates: ${vectorGate}[1+k]; }
    <#else>
        node[(k^levels-1) / (k-1)]: ${nodeType};
    </#if>
  </#if>
    connections allowunconnected:
        for i=1..sizeof(node)-1 {
  <#if bintree && namedGates>
            node[i].${parent} <-->${channelSpec} node[floor((i-1)/2)].${child(0)} if i%2==0;
            node[i].${parent} <-->${channelSpec} node[floor((i-1)/2)].${child(1)} if i%2==1;
  <#else>
            <#assign k = iif(bintree, "2", "k")>
            node[i].${parent} <-->${channelSpec} node[floor((i-1)/${k})].${child("i%"+k)};
  </#if>
        }
}
<#else>
${networkKeyword} ${targetTypeName}
{
    submodules:
<#list 0..treeLevels-1 as level>
  <#list 0..Math.pow(treeK, level)-1 as i>
    <#if gateVectorWithIndices>
        node_${level}_${i}: ${nodeType} { gates: ${vectorGate}[${1+treeK}]; }
    <#else>
        node_${level}_${i}: ${nodeType};
    </#if>
  </#list>

</#list>
    connections allowunconnected:
<#-- connect each node to its parent -->
<#list 1..treeLevels-1 as level>
  <#list 0..Math.pow(treeK, level)-1 as i>
        node_${level}_${i}.${parent} <-->${channelSpec} node_${level-1}_${(i/treeK)?floor}.${child(i%treeK)};
  </#list>

</#list>
}
</#if>

